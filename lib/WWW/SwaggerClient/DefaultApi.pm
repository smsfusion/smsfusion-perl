=begin comment

SMS Fusion API

This is the SMS Fusion API

OpenAPI spec version: 1.0.0
Contact: support@smsfusion.com.au
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_hlr
#
# HLR number lookup
# 
# @param string $key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt; (required)
# @param string $num A single phone number or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt; (required)
# @param string $cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;',
        required => '1',
    },
    'num' => {
        data_type => 'string',
        description => 'A single phone number or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;',
        required => '1',
    },
    'cc' => {
        data_type => 'string',
        description => '2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_hlr' } = { 
    	summary => 'HLR number lookup',
        params => $params,
        returns => 'HLRCallback',
        };
}
# @return HLRCallback
#
sub get_hlr {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling get_hlr");
    }

    # verify the required parameter 'num' is set
    unless (exists $args{'num'}) {
      croak("Missing the required parameter 'num' when calling get_hlr");
    }

    # parse inputs
    my $_resource_path = '/hlr/';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'num'}) {
        $query_params->{'num'} = $self->{api_client}->to_query_value($args{'num'});
    }

    # query params
    if ( exists $args{'cc'}) {
        $query_params->{'cc'} = $self->{api_client}->to_query_value($args{'cc'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HLRCallback', $response);
    return $_response_object;
}

#
# get_hlr_callback
#
# HLR number lookup with results going to a callback URL
# 
# @param string $key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt; (required)
# @param ARRAY[string] $num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s (required)
# @param string $cb HTTP or HTTPS callback URL for each result. The result will be sent as POST with a json object included in &lt;b&gt;result&lt;/b&gt;. Timeout for callbacks is set to 30 seconds (required)
# @param string $cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;',
        required => '1',
    },
    'num' => {
        data_type => 'ARRAY[string]',
        description => 'Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s',
        required => '1',
    },
    'cb' => {
        data_type => 'string',
        description => 'HTTP or HTTPS callback URL for each result. The result will be sent as POST with a json object included in &lt;b&gt;result&lt;/b&gt;. Timeout for callbacks is set to 30 seconds',
        required => '1',
    },
    'cc' => {
        data_type => 'string',
        description => '2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_hlr_callback' } = { 
    	summary => 'HLR number lookup with results going to a callback URL',
        params => $params,
        returns => 'HLRResult',
        };
}
# @return HLRResult
#
sub get_hlr_callback {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling get_hlr_callback");
    }

    # verify the required parameter 'num' is set
    unless (exists $args{'num'}) {
      croak("Missing the required parameter 'num' when calling get_hlr_callback");
    }

    # verify the required parameter 'cb' is set
    unless (exists $args{'cb'}) {
      croak("Missing the required parameter 'cb' when calling get_hlr_callback");
    }

    # parse inputs
    my $_resource_path = '/hlr-callback/';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'num'}) {
        $query_params->{'num'} = $self->{api_client}->to_query_value($args{'num'});
    }

    # query params
    if ( exists $args{'cb'}) {
        $query_params->{'cb'} = $self->{api_client}->to_query_value($args{'cb'});
    }

    # query params
    if ( exists $args{'cc'}) {
        $query_params->{'cc'} = $self->{api_client}->to_query_value($args{'cc'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HLRResult', $response);
    return $_response_object;
}

1;
